<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocialMediaApp.API</name>
    </assembly>
    <members>
        <member name="T:SocialMediaApp.API.Controllers.AccountController">
            <summary>
            Controller for managing user account operations such as registration, login, role assignment, token refreshing, and token revocation.
            </summary>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.#ctor(SocialMediaApp.Core.ServicesContract.IAuthenticationServices,SocialMediaApp.Core.ServicesContract.IMailingService,Microsoft.AspNetCore.Identity.UserManager{SocialMediaApp.Core.Domain.IdentityEntites.ApplicationUser})">
            <summary>
            Initializes a new instance of the <see cref="T:SocialMediaApp.API.Controllers.AccountController"/> class.
            </summary>
            <param name="authenticationServices">The authentication services.</param>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.RegisterAsync(SocialMediaApp.Core.DTO.AuthenticationDTO.RegisterDTO)">
            <summary>
            Registers a new user.
            </summary>
            <param name="registerDTO">The registration data transfer object containing user details.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing the authentication response.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.LoginAsync(SocialMediaApp.Core.DTO.AuthenticationDTO.LoginDTO)">
            <summary>
            Logs in an existing user.
            </summary>
            <param name="loginDTO">The login data transfer object containing user credentials.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing the authentication response.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.AddRoleAsync(SocialMediaApp.Core.DTO.AuthenticationDTO.AddRoleDTO)">
            <summary>
            Adds a role to an existing user.
            </summary>
            <param name="model">The data transfer object containing role and user information.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.RefreshToken">
            <summary>
            Refreshes the JWT token using a valid refresh token.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the new authentication response.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.RevokeToken(SocialMediaApp.Core.DTO.AuthenticationDTO.RevokTokenDTO)">
            <summary>
            Revokes a specific refresh token or the one stored in the request cookies.
            </summary>
            <param name="revokTokenDTO">The data transfer object containing the token to revoke.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the revocation.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.ForgotPassword(SocialMediaApp.Core.DTO.AuthenticationDTO.ForgotPasswordDTO)">
            <summary>
            Initiates the forgot password process by generating a reset token and sending it to the user's email.
            </summary>
            <param name="forgotPassword">The data transfer object containing the user's email and client URI.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation. Returns 200 OK if the email is sent successfully, otherwise returns 400 BadRequest.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.ResetPassword(SocialMediaApp.Core.DTO.AuthenticationDTO.ResetPasswordDTO)">
            <summary>
            Resets the user's password using the provided reset token and new password.
            </summary>
            <param name="resetPassword">The data transfer object containing the user's email, reset token, and new password.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation. Returns 200 OK if the password is reset successfully, otherwise returns 400 BadRequest with the errors.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.AccountController.SetRefreshToken(System.String,System.DateTime)">
            <summary>
            Sets the refresh token in an HTTP-only cookie.
            </summary>
            <param name="refreshToken">The refresh token to store.</param>
            <param name="expires">The expiration date and time of the refresh token.</param>
        </member>
        <member name="T:SocialMediaApp.API.Controllers.GenreController">
            <summary>
            Controller for managing genres.
            </summary>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.GenreController.#ctor(SocialMediaApp.Core.ServicesContract.IGenreServces,Microsoft.Extensions.Logging.ILogger{SocialMediaApp.API.Controllers.GenreController})">
            <summary>
            Initializes a new instance of the <see cref="T:SocialMediaApp.API.Controllers.GenreController"/> class.
            </summary>
            <param name="genreServices">The genre services.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.GenreController.GetGenres(System.Int32,System.Int32)">
            <summary>
            Gets the genres.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <returns>The list of genres.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.GenreController.CreateGenre(SocialMediaApp.Core.DTO.GenreDTO.GenreAddRequest)">
            <summary>
            Creates a new genre.
            </summary>
            <param name="genreAdd">The genre add request.</param>
            <returns>The created genre.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.GenreController.UpdateGenre(SocialMediaApp.Core.DTO.GenreDTO.GenreUpdateRequest)">
            <summary>
            Updates an existing genre.
            </summary>
            <param name="genreUpdate">The genre update request.</param>
            <returns>The updated genre.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.GenreController.DeleteGenre(System.Guid)">
            <summary>
            Deletes a genre by ID.
            </summary>
            <param name="id">The ID of the genre to delete.</param>
            <returns>The result of the delete operation.</returns>
        </member>
        <member name="T:SocialMediaApp.API.Controllers.ProfileController">
            <summary>
            Controller for managing user profiles.
            </summary>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.CreateProfile(SocialMediaApp.Core.DTO.ProfileDTO.ProfileAddRequest)">
            <summary>
            Creates a new profile.
            </summary>
            <param name="profileAdd">The profile data.</param>
            <returns>The created profile.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.UpdateProfile(SocialMediaApp.Core.DTO.ProfileDTO.ProfileUpdateRequest)">
            <summary>
            Updates a profile.
            </summary>
            <param name="profileUpdate">The updated profile data.</param>
            <returns>The updated profile.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.DeleteProfile(System.Guid)">
            <summary>
            Deletes a profile.
            </summary>
            <param name="id">The ID of the profile to delete.</param>
            <returns>The result of the profile deletion.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.GetProfile(System.Guid)">
            <summary>
            Gets a profile by ID.
            </summary>
            <param name="id">The ID of the profile to get.</param>
            <returns>The profile.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.GetProfileByUserId(System.Guid)">
            <summary>
            Gets a profile by user ID.
            </summary>
            <param name="userId">The ID of the user.</param>
            <returns>The profile.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.ProfileController.GetProfiles(System.Int32,System.Int32)">
            <summary>
            Retrieves a paginated list of profiles from the system.
            </summary>
            <param name="pageIndex">The index of the page to retrieve. Defaults to 1.</param>
            <param name="pageSize">The number of profiles per page. Defaults to 10.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:SocialMediaApp.Core.DTO.ApiResponse"/> with the status code, success flag, 
            result containing the list of profiles, and a message indicating the result.
            </returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.UserConnectionsController.#ctor(Microsoft.Extensions.Logging.ILogger{SocialMediaApp.API.Controllers.UserConnectionsController},SocialMediaApp.Core.ServicesContract.IUserConnectionsServices)">
            <summary>
            Initializes a new instance of the <see cref="T:SocialMediaApp.API.Controllers.UserConnectionsController"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="userConnectionsServices">The tweet services.</param>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.UserConnectionsController.Follow(System.Guid)">
            <summary>
             Make follow to a specific profile.
            </summary>
            <param name="followedId">The Id of profile you want to follow.</param>
            <returns>The Follower profile Id Followed profile Id and creation time.</returns>
        </member>
        <member name="M:SocialMediaApp.API.Controllers.UserConnectionsController.Unfollow(System.Guid)">
            <summary>
             Make Unfollow to a specific profile.
            </summary>
            <param name="UnfollowedId">The Id of profile you want to Unfollow.</param>
            <returns></returns>
        </member>
        <member name="T:SocialMediaApp.API.FileServices.FileService">
            <summary>
            Provides file-related services for the application.
            </summary>
        </member>
        <member name="M:SocialMediaApp.API.FileServices.FileService.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:SocialMediaApp.API.FileServices.FileService"/> class.
            </summary>
            <param name="environment">The web host environment.</param>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
        </member>
        <member name="M:SocialMediaApp.API.FileServices.FileService.CreateFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Creates a new file in the "Upload" directory.
            </summary>
            <param name="file">The file to be created.</param>
            <returns>The URL of the created file.</returns>
        </member>
        <member name="M:SocialMediaApp.API.FileServices.FileService.DeleteFile(System.String)">
            <summary>
            Deletes a file from the "Upload" directory.
            </summary>
            <param name="imageUrl">The URL of the file to be deleted.</param>
        </member>
        <member name="M:SocialMediaApp.API.FileServices.FileService.UpdateFile(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Updates a file in the "Upload" directory.
            </summary>
            <param name="newFile">The new file to be updated.</param>
            <param name="currentFileName">The URL of the current file to be replaced.</param>
            <returns>The URL of the updated file.</returns>
        </member>
        <member name="M:TweetController.#ctor(SocialMediaApp.Core.ServicesContract.ITweetServices,Microsoft.Extensions.Logging.ILogger{TweetController})">
            <summary>
            Initializes a new instance of the <see cref="T:TweetController"/> class.
            </summary>
            <param name="tweetServices">The tweet services.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TweetController.CreateTweet(SocialMediaApp.Core.DTO.TweetDTO.TweetAddRequest)">
            <summary>
            Creates a new tweet.
            </summary>
            <param name="tweetAddRequest">The tweet add request.</param>
            <returns>The created tweet.</returns>
        </member>
        <member name="M:TweetController.UpdateTweet(SocialMediaApp.Core.DTO.TweetDTO.TweetUpdateRequest)">
            <summary>
            Updates an existing tweet.
            </summary>
            <param name="tweetUpdateRequest">The tweet update request.</param>
            <returns>The updated tweet.</returns>
        </member>
        <member name="M:TweetController.DeleteTweet(System.Guid)">
            <summary>
            Deletes a tweet.
            </summary>
            <param name="tweetID">The ID of the tweet to delete.</param>
            <returns>The result of the tweet deletion.</returns>
        </member>
        <member name="M:TweetController.GetTweets(System.Int32,System.Int32)">
            <summary>
            Gets a list of tweets.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <returns>The list of tweets.</returns>
        </member>
        <member name="M:TweetController.GetTweet(System.Guid)">
            <summary>
            Gets a tweet by ID.
            </summary>
            <param name="tweetID">The ID of the tweet.</param>
            <returns>The tweet.</returns>
        </member>
        <member name="M:TweetController.GetTweetstoSpecificProfile(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets tweets for a specific profile.
            </summary>
            <param name="profileID">The ID of the profile.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <returns>The list of tweets for the specific profile.</returns>
        </member>
    </members>
</doc>
